from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import re
import os
import psycopg2
from datetime import datetime

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –ë–æ—Ç –±—É–¥–µ—Ç –±—Ä–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ "—Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞" –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Render
TOKEN = os.environ.get('TELEGRAM_TOKEN')
ADMIN_ID = int(os.environ.get('ADMIN_ID'))
DATABASE_URL = os.environ.get('DATABASE_URL')
# ------------------

def db_query(query, params=None, fetch=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    cur.execute(query, params)
    if fetch == "one":
        result = cur.fetchone()
    elif fetch == "all":
        result = cur.fetchall()
    else:
        result = None
    conn.commit()
    cur.close()
    conn.close()
    return result

def setup_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç"""
    query = """
    CREATE TABLE IF NOT EXISTS blocklist (
        user_id BIGINT PRIMARY KEY,
        block_date TEXT
    );
    """
    db_query(query)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name
    await update.message.reply_text(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –Ø –±—É–¥—É —Ä–∞–¥–∞ –≤–∞—Å –ø–æ—Å–ª—É—à–∞—Ç—å. –ú–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ –∑–∞ —Å–æ–≤–µ—Ç–æ–º, –≤–æ–ø—Ä–æ—Å–æ–º –∏ –¥–∞–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –î–∞–≤–∞–π—Ç–µ –±—É–¥–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ —É–≤–∞–∂–∞—Ç—å. –ï—Å–ª–∏ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–≤—É—Ö –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–¥—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–Ω–æ–≤—å. –•–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!')

async def forward_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if db_query("SELECT 1 FROM blocklist WHERE user_id = %s", (user.id,), fetch="one"):
        await update.message.reply_text("–í—ã –≤–µ–ª–∏ —Å–µ–±—è –Ω–µ–ø–æ–¥–æ–±–∞—é—â–µ, —Ç–∞–∫ —á—Ç–æ –ø–æ–ø–∞–ª–∏ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –ü–æ–¥—É–º–∞–π—Ç–µ –Ω–∞–¥ —Å–≤–æ–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º, –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è.")
        return

    message = update.message
    await message.forward(chat_id=ADMIN_ID)
    
    hidden_header = f"<ID:{user.id}><MID:{message.message_id}>"
    user_info = f"@{user.username}" if user.username else f"{user.full_name}"
    
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üëÜ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≠–¢–û —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: {user_info}\n{hidden_header}"
    )
    await message.reply_text('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ª—ã—à–∞–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.')

async def reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat_id == ADMIN_ID and update.message.reply_to_message:
        original_message_text = update.message.reply_to_message.text
        try:
            user_id_match = re.search(r"<ID:(\d+)>", original_message_text)
            message_id_match = re.search(r"<MID:(\d+)>", original_message_text)
            if user_id_match and message_id_match:
                user_id = int(user_id_match.group(1))
                message_id = int(message_id_match.group(1))
                await context.bot.copy_message(chat_id=user_id, from_chat_id=ADMIN_ID, message_id=update.message.message_id, reply_to_message_id=message_id)
                await update.message.reply_text('–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
            else:
                await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID.')
        except Exception as e:
            print(e)
            await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.')

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ---

async def block_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID: return
    try:
        user_id_to_block = int(context.args[0])
        block_date = datetime.now().strftime("%Y-%m-%d %H:%M")
        db_query("INSERT INTO blocklist (user_id, block_date) VALUES (%s, %s) ON CONFLICT (user_id) DO NOTHING", (user_id_to_block, block_date))
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_block} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except (IndexError, ValueError):
        await update.message.reply_text("–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /block ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

async def unblock_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID: return
    try:
        user_id_to_unblock = int(context.args[0])
        db_query("DELETE FROM blocklist WHERE user_id = %s", (user_id_to_unblock,))
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_unblock} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except (IndexError, ValueError):
        await update.message.reply_text("–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unblock ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

async def show_blocklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID: return
    blocked_users = db_query("SELECT user_id, block_date FROM blocklist", fetch="all")
    if not blocked_users:
        await update.message.reply_text("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç!")
    else:
        message = "üîí –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n\n"
        for user_id, block_date in blocked_users:
            message += f"‚Ä¢ ID: `{user_id}`\n  (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {block_date})\n"
        await update.message.reply_text(message, parse_mode='Markdown')

def main():
    setup_database() # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞
    
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("block", block_user))
    application.add_handler(CommandHandler("unblock", unblock_user))
    application.add_handler(CommandHandler("blocklist", show_blocklist))
    
    application.add_handler(CommandHandler("start", start))
    
    user_filter = filters.ALL & ~filters.COMMAND & ~filters.Chat(chat_id=ADMIN_ID)
    application.add_handler(MessageHandler(user_filter, forward_to_admin))
    
    admin_filter = filters.ALL & ~filters.COMMAND & filters.Chat(chat_id=ADMIN_ID)
    application.add_handler(MessageHandler(admin_filter, reply_to_user))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
